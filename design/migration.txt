Migration from the old updater
==============================

We want to migrate the routers still running the old updater to the
new updater. We need to generate a configuration for it. The hard part
is choosing the packages user wants installed and kept up-to-date. The
configuration of user-lists is the same as with the old.

We want a set of packages that:

* Covers everything ‒ it would not want to uninstall anything.
* Is as small as possible, since a dependency of whatever the user
  wanted might not be needed anymore, or may even completely disappear.

The problem is, opkg doesn't store what package is installed as a user
request and what is installed as a dependency. We therefore employ the
following steps to generate a reasonable set.

It seems easiest to provide another binary which uses the updater lib
internally, since we need to process several sources which it needs
how to handle.

Check the migration hasn't happened yet
---------------------------------------

We wouldn't want to overwrite the configuration the user already made.
Therefore we check the configuration files look unmodified.

Run the parsing & planning parts of updater
-------------------------------------------

We have the repositories and user-lists configured. We use them as the
base of the configuration and run by it, in a dry-run way. We produce
the plan of actions we would take.

We examine the plan of actions and take the packages scheduled for
removal (update and install actions are not interesting for us at that
point).

Try to find out top-level packages
----------------------------------

The next thing we do is to go through the packages scheduled for
removal and drop anything that is a dependency of something else in
that set. We avoid any kind of fancy dependencies, like `Or()` or
`Not()`, as they might be computed differently depending on the
requests and we want to fix what is installed now.

Dump the rest
-------------

Finally we output the rest formatted as `Install` commands into the
`user.lua` configuration file. We append a lower priority, to allow
user to request installation of an alternative dependency in the
future in case we „fixed“ the current one. Also, we set the
`ignore = 'missing'` flag in case some such dependency ceases to
exist.
