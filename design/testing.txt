Testing of the updater
======================

Every coder makes mistakes and the updater might turn out to be a
larger project. Therefore, some automatic tests that may spot errors
and problems may be useful.

But testing updater automatically in the full is problematic, since we
need a whole system to do it. While we might want to do something like
that in some Turris-global way, we need a way to test more scenarios.

Pure unit tests
---------------

Some parts are easy to separate and test independently. This is
definitely the case of the planner, which would be fed with objects
describing the situation and would produce list of actions to do.

The state manager might be used in this manner, provided it may be
configured to use different path to the files than the default.

The process manager and URI manager may be tested in very similar way.
The URI manager needs access to network and it needs a server with
preset files somewhere. We probably don't want to bundle a server with
the source code.

Logger is likely to be testable separately in a limited way.

Mocking parts of functionality
------------------------------

Certain tests may need some lower-level routines to be replaced. We
may want to run the whole updater and see what would have been done
without actually replacing files or downloading packages.

Replacing lua code is simple. We can just assign to the correct global
variable and overwrite the function or object stored there.

The C functions might be mocked as well, but in a harder way. The
general approach could be to link all the .o modules except the ones
to be replaced, and linking a replacement .o for such modules. This
way the test would need to be in its own binary, but reusing a lot of
code.

Testing libraries
-----------------

It seems lunit might work for lua code (http://www.mroth.net/lunit/).
Check for C code looks usable too (https://libcheck.github.io/check/).
Also, some tests might be assisted with shell scripts checking the
output, produced files, etc.

We probably want to include the tools as git submodules instead of
requiring them being installed.

Guidelines
----------

First, any code being written should be either tested somehow or at
least considered why writing tests for it would be impossible or too
much work, or the tests would test only trivial matters (like that
after assigning to a variable the value is stored there).

Also, as the tests depend on extra libraries and need to compile
additional binaries, they should be in a separate directory and be
compiled only as a dependency of `make test`.

The testing „framework“ should be initialized during the starting
phases of implementation.
