Updater internals
=================

This document describes how the updater would work under the hood.

Execution phases
----------------

There are distinct phases of the execution, each one having a
different task.

Reading of the current state
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Information about what is already installed, about stored flags, etc.
are loaded.

Parsing of the lua scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~

The main lua configuration script is loaded and run. From it, further
lua scripts are obtained and executed.

All the repositories and intentions to install packages are described.

Downloading the repository indices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The repository index files are downloaded or obtained from disk and
parsed, providing list of packages each.

Planning
~~~~~~~~

The intentions what shall be installed is put together with the
repository indices. All the dependencies are resolved, which produces
list of packages to install or remove.

Optionally, if the configurantion requires it, user is notified and
further action is postponed. In such case, the plan is stored for
future use.

Downloading
~~~~~~~~~~~

The needed packages are downloaded.

Unpacking
~~~~~~~~~

Packages are unpacked to a temporary location. This may be in
permanent storage (because of the transactions), but it is not the
live system yet.

Merging
~~~~~~~

Once the files are all ready and synced, they start to be moved into
the right place. This is interspersed with running pre-* and post-*
scripts and hooks.

At the end of this phase, any extra files from previous or uninstalled
packages are removed.

Save of status
~~~~~~~~~~~~~~

The flags and status of installed packages are stored.

Components
----------

These are the pieces that form the updater. This does not list all the
small things, like package objects, there's not much sense in
designing them yet.

Also, there's going to be a lot of glue in between tying it together.
There's nothing much to be said about it in a high-level design
document.

Event loop
~~~~~~~~~~

Some parts of the program need to wait for multiple events. This'll do
the waiting in some generic way. We may need to be able to wait for a
set of events to complete and then finish the event loop.

Process manager
~~~~~~~~~~~~~~~

It allows running other processes and pass input and output with them.

URI manager
~~~~~~~~~~~

This part is able to obtain the data for an URI. It also can do
validation of the content.

The downloading may work in a parallel way, downloading multiple URIs
at once.

State manager
~~~~~~~~~~~~~

This allows reading and writing of the flags and package state data.
It is likely going to be just a set of functions.

Logger
~~~~~~

A place where log messages are sorted and output to several possible
locations.

Journal
~~~~~~~

The journal is some persistent data structure allowing for recovery in
case of power outage or something. It needs to be careful about writes
and flushes to the file. Also, it may need to handle broken end of the
journal file.

Sandbox
~~~~~~~

This part prepares execution environments for the configuration
scripts.

Planner
~~~~~~~

This part resolves the dependencies and produces a plan of action.

Parts by language
-----------------

Likely, the updater would be combination of C and lua code. Almost all
of the glue code is likely to be in lua. From the components above,
many are likely to end up in C:

* The event loop
* The process manager
* The URI manage.
* The journal.

Lua seems better for:

* State manager
* Sandbox

The logger might turn easier in either of the languages. The planner
will start in lua, but it is possible there'll be some
performance-critical parts needing the power of C.
