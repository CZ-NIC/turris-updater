
.PHONY: check-clean test valgrind luacheck check test-locks valgrind-locks luac-autoload luacheck coverage $(O)/.coverage.info

BINARIES_NOTARGET += tests/locks
locks_MODULES += locks
locks_LOCAL_LIBS += updater

$(O)/tests/check-compiled/compiled:
	mkdir -p $(O)/tests/check-compiled
	cd $(O)/tests/check-compiled && cmake $(abspath $(S))/tests/check -DHAVE_SUBUNIT=0
	+make -C $(O)/tests/check-compiled
	touch $(O)/tests/check-compiled/compiled

$(O)/tests/luacheck-compiled/bin/luacheck:
	mkdir -p $(O)/tests/luacheck-compiled
	cd $(S)/tests/luacheck && ./install.lua $(abspath $(O)/tests/luacheck-compiled)

clean: check-clean
check-clean:
	rm -rf $(O)/tests/check-compiled
	rm -rf $(O)/tests/luacheck-compiled

C_TESTS := \
	arguments \
	events \
	interpreter

LUA_TESTS := \
	backend \
	events \
	interpreter \
	journal \
	migrator \
	planner \
	postprocess \
	requests \
	sandbox \
	transaction \
	utils \
	uri \
	picosat

ifdef COV
LUA_TESTS += coverage

# Aggregates coverage to info file for genhtml.
# It uses lcov for coverage from C sources and our script for coverage from Lua
# No dependencies are intentional, this way coverage can be run for all tests or
# just for small subset of them. It's on user to prepare data by launching tests.
$(O)/.coverage.info:
	lcov --capture --directory $(O) --base-directory $(S) --output-file $@
	$(S)/tests/lua_coverage2info.pl $(O)/.lua_coverage $@ $(S)

coverage: $(O)/.coverage.info
	genhtml $< --output-directory $(O)/coverage
endif
clean: clean-coverage
clean-coverage:
	rm -rf $(O)/.lua_coverage
	rm -f  $(O)/.coverage.info
	rm -rf $(O)/coverage

# Ignore stacktraceplus and dumper, not our creation.
LUA_AUTOLOAD := $(filter-out 01_stacktraceplus 05_dumper,$(patsubst a_%.lua,%,$(notdir $(wildcard $(S)/src/lib/autoload/a_*.lua))))

TEST_URIINTERNAL := $(abspath $(wildcard $(S)/tests/internal/*))
$(O)/.gen/tests/uriinternal.embedlist: $(S)/src/lib/gen_embed.sh $(S)/src/lib/embed_types.h $(TEST_URIINTERNAL)
	$(M) GEN $@
	$(Q) mkdir -p $(dir $@)
	$(Q)$< "" uriinternal $(S)/src/lib/embed_types.h $(TEST_URIINTERNAL) >$@

define DO_C_TEST

BINARIES_NOTARGET += tests/ctest-$(1)
ctest-$(1)_MODULES += $(1) uriinternal.embed ctest
$$(patsubst %,$(O)/.objs/tests/%.o,$$(ctest-$(1)_MODULES)): $(O)/tests/check-compiled/compiled
ctest-$(1)_SYSTEM_LIBS += check m rt
ctest-$(1)_LOCAL_LIBS += updater
$(O)/bin/ctest-$(1): EXTRA_LIBDIRS := $(O)/tests/check-compiled/src/
$(O)/bin/ctest-$(1): EXTRA_INCLUDES := $(O)/tests/check-compiled/src $(S)/tests/check/src/ $(S)/tests/check-compiled/
$(O)/bin/ctest-$(1): $(O)/tests/check-compiled/compiled

test: test-c-$(1)
valgrind: valgrind-c-$(1)

endef

$(eval $(foreach TEST,$(C_TESTS),$(call DO_C_TEST,$(TEST))))
test: $(addprefix test-lua-,$(LUA_TESTS))
valgrind: $(addprefix valgrind-lua-,$(LUA_TESTS))
luac-autoload: $(addprefix luac-autoload-,$(LUA_AUTOLOAD))
luacheck: $(addprefix luacheck-,$(LUA_AUTOLOAD))

# Use the FORCE target instead of .PHONY, since .PHONY doesn't work well
# with patterned recipes. The FORCE comes from our shared build system.

TESTS_ENV = SUPPRESS_LOG=1 S=$(S) TMPDIR=$(abspath $(O)/testdir) COVERAGEDIR=$(abspath $(O)/.lua_coverage)

test-c-%: $(O)/bin/ctest-% FORCE
	mkdir -p $(O)/testdir
	$(TESTS_ENV) $<

valgrind-c-%: $(O)/bin/ctest-% FORCE
	mkdir -p $(O)/testdir
	CK_FORK=no $(TESTS_ENV) $(VALGRIND) $<

test-lua-%: $(S)/tests/%.lua $(O)/bin/lulaunch FORCE
	mkdir -p $(O)/testdir
	$(TESTS_ENV) $(O)/bin/lulaunch $<

valgrind-lua-%: $(S)/tests/%.lua $(O)/bin/lulaunch FORCE
	mkdir -p $(O)/testdir
	$(TESTS_ENV) $(VALGRIND) $(O)/bin/lulaunch $<

luac-autoload-%: $(S)/src/lib/autoload/a_%.lua FORCE
	luac -p $<

luacheck-%: $(S)/src/lib/autoload/a_%.lua $(O)/tests/luacheck-compiled/bin/luacheck $(S)/tests/luacheck.config FORCE
	$(O)/tests/luacheck-compiled/bin/luacheck --config $(S)/tests/luacheck.config $<

test-locks: $(O)/bin/locks
	$(O)/bin/locks

valgrind-locks: $(O)/bin/locks
	$(VALGRIND) $(O)/bin/locks

test: test-locks
valgrind: valgrind-locks
check: test valgrind luac-autoload luacheck cppcheck

include $(S)/tests/lunit-launch/Makefile.dir
include $(S)/tests/system/Makefile.dir
