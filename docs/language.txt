The updater language
====================

This document is about the language describing specific update
scenarios. It is the core configuration language of the updater
itself, listing which packages should be installed, where they come
from and any special quirks needed for specific situations. Other ways
of configuring are possible (like command line requests to install
some packages, or listing things in UCI file), but these are usually
implemented in this language.

The language is, strictly speaking, ordinary Lua (currently the
supported version of Lua on OpenWRT is 5.1, but there should be very
little difference in what we use). Just the set of functions available
is limited to the functions listed here.

TIP: Using conditions, loops and variables is fully supported
and sometimes desirable.

Install and Uninstall requests resolution
-----------------------------------------

The updater language primarily adds various requests. There are two types of them.
There are requests to install and requests to not install some package. Updater
later in execution tries to resolve these requests to get list of packages desired
to be in system.

There can be requests that are exclusive to each other and updater in such case
has no other option than to not satisfy them. Which request is not satisfied is
given by this rules in order of priority:

* Specified priority of request where higher means higher priority
* If request has condition or not. The preferred requests are the direct ones thus
  without any condition.
* If request is install or not, just as a rule we prefer install requests.
* The order of definition in scripts. The request defined earlier is preferred.

The special case are critical install requests, those have to be always met
otherwise fatal error is raised.

Security levels
---------------

There are different security levels of the scripts used. The security
level may further limit the set of commands and the abilities of given
commands. This is to ensure the server may never send malicious
commands covertly (it still can send version of package that contains
the malicious code, but that's impossible to prevent with
an auto-updater, but it would at least have to notify about the
package being installed).

Security levels are:

Full::
  The Lua code is not run in any sandbox at all. All functions here
  work without any limits. Also, all Lua libraries are available
  without any limitation and further Lua code can be required
  (including compiled `.so` modules). This is what the internals of the
  updater would be built in.
Local::
  It is possible to read UCI configuration and execute arbitrary
  shell commands.
Remote::
  Reading UCI config is not possible.
Restricted::
  It is possible to further restrict the entities referenced to a
  string match (eg. ensure that it comes from a given server). Access
  to flag storage is restricted only to flags belonging to the current
  script and scripts it references.

No function allows raising the security level when referencing another
script.

Each script runs with its own environment ‒ they don't see each
other's variables.

Order of execution
------------------

The scripts are executed in the order they are referenced, in DFS
order. A referenced script is first fully executed (with its
sub-scripts) before the current script continues. In that sense, it
works similar to any other scripting language `include` command.

However, the execution of the script does not include installation of
packages. That happens after all the scripts terminated. The scripts
simply describe in what situation the OS should be.

It is possible to hook some functions in between (after, before)
installation of packages, or even between installation and
configuration.

URIs
----

Sometimes, an entity needs to be referenced somehow. Such entity may
live in the local filesystem or be on an external server.

These are the types of URIs supported:

* `http://`
* `https://`
* `file://`
* `data:`

The remote ones (`http` and `https`) may need verification of the
integrity of its content. The other are considered secure and don't
need any kind of verification.

The `data:` is slightly limited compared to what the standard (RFC
2397) allows. The media type and charset are irrelevant to the
updater and are therefore not supported.

NOTE: In previous versions there was an `internal:` URI but that one is no longer
available and can't be used.

Verification
~~~~~~~~~~~~

To make remote access secure we need to verify downloaded content. This
is relevant to `http://` and `https://` URIs.

Options relevant to `https://` URI::

ca;;
  An URI or table of URIs with trusted SSL certificate authorities, in PEM format.
  These URIs are not verified. `true` can be specified and in such case all system
  certificates are considered (generally all files in `/etc/ssl/certs`).
  If `false` or empty table is specified then CA verification is skipped. If not
  specified (or set to `nil`) it is inherited from the verification of script
  running the command. In default it is set to `true` so it verifies server
  against all installed CA certificates.
crl;;
  An URI or table of URIs with CRLs relevant to the server. Can be set to `false`
  or empty table and in such case CRL is not checked. If set to `nil` then its
  value is inherited from the verification of script running the command. In
  default it is set to `{}`.
ocsp;;
  `true` of `false` if you want or don't want to use OCSP (Online Certificate
  Status Protocol). If set to `nil` then value is inherited from verification of
  the script. Default value is `true`.

Options relevant to `http://` and `https://` URIs::

pubkey;;
  An URI or table of URIs with trusted public signature keys. These are not
  verified (therefore it is recommended to come from a already verified source ‒
  like `data:` or `file://` URI). If it is not specified (`nil`), it is inherited
  from the verification of the script running the command. If empty table is
  specified then no signature checking is done. Default value is `{}`.
sig;;
  URI where the signature of the resource lives. This one is not verified. If it
  is set to `nil`, it is constructed by adding `.sig` to the end of the verified
  URI. The option has effect only if `pubkey` is set so signature checking is
  done. In default it's set to `nil`.

IMPORTANT: URIs specified in these verification options are not verified (default
values, not inherited ones, are used). Because of that it is suggested and
required to use only trusted/secure local URIs for that purpose. That means:
`file://` and `data://`.

TIP: URIs specified in these verification options has to be valid but the resource
don't have to be available (such as missing file). That is ok and it does not
cause error directly. This means that you can provide keys and certificates that
might not be installed in configuration without worrying about their existence.

NOTE: Another option `verification` exist. It was originally used for verification
level specification but that is now replaced with `pubkey` and `ca` option
specific values. For backward compatibility it is silently ignored.

NOTE: For `ca` option there is also constant `system_cas` and for `crl` option
there is constant `no_crl`. These are obsoleted but are still defined.
`system_cas` is defined as `true` and `no_crl` is defined as `false`.
`system_cas` 

Dependency description
----------------------

Package dependencies are very important part of package maintenance.
Therefore, it is possible to describe them in the updater.

A dependency might be one of:

string::
  The string is parsed the same way as from the OpenWRT packages.
  Dependencies are separated by commas, each ``word'' meaning a single
  dependency.  The dependencies can also use versions with relational
  operators.  The version with the operator is in parentheses after
  the name of the package (eg `kernel (=version-number)`, `openssl
  (>=1.0.0)`). As an extension, the operator `~` may be used to denote
  a lua string pattern match on the version. All dependencies and
  version restrictions must be met.
package handle::
  A concrete package, represented by the result of the `Package`
  command may be used directly.
table::
  The table shall contain multiple sub-dependencies. Each one must be
  met. The sub-dependency may be of any type (string, other table,
  package handle, `Or()`, `Not()`).
`Not(string)`::
  This denotes that a single package described by the string must not
  be present on the system. This may be used if two packages ``fight''
  over the same file, or when they provide colliding services (both
  are DNS servers, for example).
`Or(dep, dep, ...)`::
  Each `dep` argument is a dependency of any type. The whole `Or()` is
  fulfilled when at least one of the argument is fulfilled. When
  multiple options are possible, the leftmost of them is preferred.

Available commands
------------------

Most of the commands has following format:

  Command("string", "string", {param = 1})

Script
~~~~~~

  Script("uri", { extra })

This command runs another script.

The uri provides the location of the script.

The second parameter is a table with extra information. It allows
fine-tuning the verification of URI and the way the script runs. The
current extra parameters are following.

security::
  Security level on which the script runs. It shall contain one of the
  above values. The name is case insensitive. It is not possible to
  raise the level, such attempt is reported as an error. If not
  specified, the level is deduced from the URI. If the URI is remote,
  it doesn't go above `remote`, otherwise it doesn't go above `local`.
optional::
  Set this to `true` to not fail if retrieval of this script fails.
sig::
pubkey::
ca::
crl::
ocsp::
  Options to verify the script integrity.

WARNING: Following format is now marked as obsolete and should not be used:
`Script("script-name", "uri", { extra })`

NOTE: There is also obsoleted extra option `ignore`. This should not be used and
any value set to it is effectively considered to be same as setting `optional` to
`true`.

Repository
~~~~~~~~~~

  Repository("repository-name", "uri", { extra })

This command introduces another repository of packages. The can
be used as a reference from other commands and is used in error
messages. Be aware that collision names are considered error and
such repositories are not considered.

The URI is expected to contain an OpenWRT repository in the format
produced by the buildroot.

Extra parameters are:

index::
  Overrides the URI at which the repository index lives and uses the
  main URI as the place where packages are downloaded from. Both
  gzipped and plain versions may be in the given URI. If the option is
  not listed, it is expected to be in `Packages.gz`.
priority::
  In case of a package being available in multiple directories, the
  package is taken from the repository with highest priority. In case
  of equality, the one introduced first wins. The default when the
  option is not specified is 50. The number must be an integer between
  0 and 100.
optional::
  Set this to `true` to not fail if it is not possible to receive repository for
  any reason or to parse it. This can be due to missing resource or invalid
  verification but in both cases this is not fatal for updater execution and it
  continues without this repository.
pkg_hash_required::
  You can set this to `false` to disable error when package has no supported hash
  in the origin repository index. You want to set this to `false` most likely
  because you do not need verification of packages (for example in case of
  `file://` protocol).
sig::
pubkey::
ca::
crl::
ocsp::
  Options to verify the index integrity.

NOTE: There is also obsoleted `subdirs` extra parameter. It was intended to be
used as a simple way to add multiple repositories at once. It had small trick
under its sleeve that it combined all those repositories under one name but that
effectively changes nothing. In new versions of Updater-ng this option is only
emulated and repository with name generated with following script is added
instead: `NAME-SUBDIR` where `NAME` is name of repository and `SUBDIR` is specific
`subdirs` values.

NOTE: There is also obsoleted extra option `ignore`. This should not be used and
any value set to it is effectively considered to be same as setting `optional` to
`true`.

Install
~~~~~~~

  Install("package", "package", { extra }, "package", "package", { extra })

This command takes multiple package names. It requires that given packages are to
be present in the system.

Package name can be extended by version specification the same way as descibed for
dependency description (_check for `requests_version` feature_).

The resolving of extra options acts the same as with `Uninstall`.

Available extra options:

priority::
  In case of colliding requirements (the same package is required by
  an ``Uninstall`` command or as a dependency of something), the
  requirement with the higher priority wins. In case of a draw, an
  error is reported. The priority defaults to 50 and must be between 0
  and 100.
repository::
  Usually, all repositories are searched according to their
  priorities. If you specify this option as a lua table, only the
  repositories listed here are searched, in the order in the table
  (ignoring the global priority).
reinstall::
  When set to any value, the package is re-installed even if the
  chosen version is already installed.
critical::
  If set to any value, the package and all its dependencies are
  considered critical. The updater will try harder to have it in a
  consistent state or be able to at least fix it without access to
  network. Other packages may stop working if the update is
  interrupted at the wrong time (for example by a power outage), but
  would be fixed by another finished updater run.
optional::
  Set this to `true` to not fail if packages is not available from any configured
  repository. Be aware that this has implications if form of possible removed
  packages from system.
condition::
  Conditional install request. This is dependency description for this request.
  Requested package is not requested to be installed if condition is fulfilled and
  not requested if not fulfilled. This allows you to install packages if some
  other package is installed as well without introducing real dependency. This is
  handy for preventing circular dependencies. Note that this field is not
  considered when packages are sorted for install/removal.

IMPORTANT: Package may be required to be installed or uninstalled multiple times
(for example by multiple scripts). All such requirements are tried to be met (eg.
by unifying the version options, etc).

NOTE: There is also obsoleted but still working option `ignore` which if set to
any boolean true value it is considered as if `optional` extra option would be
set to `true`.

NOTE: In the past there was also `version` extra option. This was a way to request
specific version before version could have been specified as an extension to
package name.

Uninstall
~~~~~~~~~

  Uninstall("package", "package", { extra }, "package", "package", { extra })

This command is the opposite of `Install`. This command takes multiple package
names. It ensures none of the packages is installed.

Package name can be extended by version specification the same way as descibed for
dependency description.

TIP: This is not needed in most cases, since unneeded packages are removed
automatically.

Extra options modify the packages preceding them, but only up to the
previous extra options block. Therefore, the first two packages in the
example are modified by the first extra options block, the third and
fourth by the second block.

priority::
  Acts the same as with `Install`.
condition::
  Acts the same as with `Install` with difference that condition fulfilment causes
  package to be requested as removed and not installed.

Package
~~~~~~~

  Package("name", { extra })

This command allows amending a package from a repository. It allows for adding
dependencies (even negative or alternative dependencies).  It also allows creation
of virtual packages ‒ a package that doesn't really exist, but can participates in
the dependency computation.

A package may be amended multiple times. Each time the options are merged into the
package options.

The options are:

virtual::
  If set to any value, the package is virtual. If a real package of the same name
  exists then it is silently ignored. Note that this means that installed package
  that is marked as virtual would be removed from system by updater.
deps::
  Additional dependencies for the package. The dependencies are merged together as
  if all the sources were put into a table (eg. all of them must be fulfilled).
  There's no way to remove dependencies.
order_after::
order_before::
  Usually, all dependencies of a package are installed before the package.
  Sometimes, it may be desirable to break this order and these options allow that.
  Both of them list packages after or before which the current package shall be
  installed, in a table. This allows breaking dependency cycles. These options are
  mere hint, the updater may decide to not follow them if it is not possible to
  satisfy. Note that this has effect only on running the pre_* and post_* scripts
  and hooks, since all the files of all updated packages are merged into the
  system together.
reboot::
  A reboot is needed when installing the package. The reboot is scheduled
  according to the value.
  delayed;;
    The package needs a reboot for the new version to take effect, but the old
    version works, so it may be delayed for arbitrary amount of time.
  finished;;
    The reboot needs to be done once the update is finished. It is because the old
    version no longer works as expected.
replan::
  The package has an effect on the updater itself. Therefore, updater have to run
  planning again. When this happens is according to value.
  finished;;
    Replan is done after whole initial update was performed. Use this option if
    your package changes some setting that updater reads. It can be some uci
    config or even some additional updater configuration (usable for example if
    you want to add repository by installing package).
  immediate;;
    When this is set it interrupts the update after this package is set up. This
    causes updater to run planning again as soon as the change is made.  This
    should be used only for packages containing updater itself or closely related
    packages. If there are multiple packages specifying immediate replan then
	replan happens on last package specifying it.
abi_change::
  The package changed its ABI (or some other interface) and some other packages
  need to be reinstalled. If this is set to `true` and the package is installed or
  updated, all packages that depend on it are reinstalled. If it is set to a
  table, it lists packages that need to be reinstalled. When merging `true` to a
  table, `true` is considered to be the list of packages depending on this one.
abi_change_deep::
  Same as abi_change, but also reinstall packages that depends indirectly on
  package that changed its ABI. That means if some package is reinstalled because
  of change of ABI, all packages that depends on it are also reinstalled and so
  on.

NOTE: Originally there was also option `ignore` that allowed pass for different
problems but most of those were not working and usage of them was questionable.
This options is now considered as obsolete and is ignored.

Mode
~~~~

  Mode("mode", "mode")

Updater supports various modifications to standard execution. Such modification
can be requested by this command as well as some of them being accessible directly
as arguments to *pkgupdate* command.

Supported modes:

reinstall_all::
  Consider all packages as not being installed. Such consideration leads to full
  system reinstall by updater. This is handy if versions of packages might be same
  but content of installed package don't. This is effectively like if all
  `Install` calls would have extra `reinstall = true`.
no_removal::
  Do not remove not required packages in this run from system. This has exception
  and those are conflicting packages with to be installed packages.
optional_installs::
  Behave like if all `Install` requests would have extra `optional = true`. This
  means that any install request that is not satisfied is just ignored. You can
  use this in combination with `no_removal` to update system when some of the
  repositories are not at the moment available without needing to tweak
  configuration nor remove those packages.

Export and Unexport
~~~~~~~~~~~~~~~~~~~

  Export("variable")
  Unexport("variable")

These commands are described in section `Export variables to Script`.

version_cmp and version_match
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  version_cmp("version1", "version2")
  version_match("version", "version_relation")

Both of these functions implement way to compare versions of package.

`version_cmp` compares two version strings and returns `-1`, `0`, or `1`
if version in first argument is less, equal, or greater than version in second
argument respectively.

`version_match` allows you to use same syntax as in case of string dependency.
So you will pass version string as first argument and then string with version
relation as second argument (for example:
`version_match(installed['pkg'].version, '>=1.0.0')`)
It returns true if version matches given version relation, otherwise false.

Logging
~~~~~~~

  DBG("debug text")
  INFO("information text")
  WARN("warning text")
  ERROR("error text")
  DIE("error text")

These commands allows printing of messages for their corresponding
verbosity levels. On top of that `DIE` command also results to
updater failure.

Access files
~~~~~~~~~~~~

On top of standard `io` and `file` updater also defines some of its own functions
for files access.

  ls(path)
  stat(path)
  lstat(path)

All these functions have to be called with string argument containing path. Note
that you should prepend all paths with `root_dir` variable to support off root
execution.

ls::
  This functions returns table with file names under the given path (acts like
  shell's `ls -a`, ommiting `.` and `..` entries). If given path is not directory
  or doesn't exists then error is raised. Value in table for each key is the type
  of file, which may be:
    b;; A block device
    c;; A character device
    d;; A directory
    f;; A named pipe
    l;; A symbolic link
    r;; A regular file
    s;; A unix-domain socket
    ?;; Failed to determine the type
stat::
  Statistics about the given file. If the file does not exist, it returns nothing.
  Otherwise, the file type is returned (see the types of `ls`). The second result
  is the permissions of the file, in the imitation of shell's `ls -l`, like
  `rwxr-x---`.
lstat::
  Same as `stat` except the `lstat` behaviour is preferred. (eg. provides info
  about symbolic link if it is a link, instead of the target).

Predefined variables
--------------------

There are several global variables. These are set anew for each script
run, so one script can't damage them for another. Modifying them has
no effect on the updater's behaviour, unless specifically mentioned.
Note that some of the tables might be generated on demand by
meta-table events, making it impossible to list keys.

root_dir
~~~~~~~~

Root directory specified from command line or `/` if no such option
was specified. Use this if you are accessing some files.

self_version
~~~~~~~~~~~~

String containing version of updater.

language_version
~~~~~~~~~~~~~~~~

Number signaling version of updater configuration language used. This
is always `1` for language described in this document.

features
~~~~~~~~

Set of features current updater supports. You can check for feature
this way: `features['feature']`. These are currently available features:

priorities::
  Updater handles priorities between multiple requests for same package.
provides::
  Updater supports `Provides` control field.
conflicts::
  Updater supports `Conflicts` control field.
abi_change::
  Updater can handle and propagate ABI change.
abi_change_deep::
  Updater can handle and propagate deep ABI change.
replan_string::
  Updater expects replan to be a string (if this feature isn't set than it's
  expected to be only boolean).
relative_uri::
  Updater supports relative URI where URI is deduced relative to script in which
  it was defined in.
no_returns::
  Functions such as `Repository` and `Package` no longer return handler that can
  be used in other calls.
no_error_virtual::
  Virtual for package with candidate no longer results in an error. Instead
  virtual just makes all candidates not to be installed while requests for that
  package fulfilled.
request_condition::
  `Install` and `Uninstall` requests support `condition` extra field.
fatal_missing_pkg_hash::
  Missing or no supported hash for package in repository index is considered as
  fatal error now.
requests_version::
  Updater supports versioned `Install` and `Uninstall` requests. Extra argument
  `version` of `Install` no longer works.
priority_requests::
  Requests are now resolved in strict order instead of maximum satisfaction. The
  most important effect this has is that `Install` requests of same priority no
  longer collide with `Uninstall` requests and result in error but rather
  `Install` request is just preferred. This applies also to any indirect
  collisions trough conditions.

installed
~~~~~~~~~

This is a table of installed packages. The keys are package names and
values are tables with following keys:

version::
  The installed version.
files::
  Files belonging to the package (a table).
configs::
  Configuration files belonging to the package (a table).
repository::
  Name of the repository it has been installed from. It may be missing
  in case it is a package provided outside of a repository. Note that
  the name corresponds to the time the package has been installed and
  that repository may be unavailable now or the name represent a
  different repository.
install_time::
  Unix timestamp specifying when the package has been installed, in
  UTC.

The top-level table is instantiated (not generated through
meta-tables), therefore it is possible to get the list of installed
packages.

os_release
~~~~~~~~~~

This is table with parsed content of os-release file. Path to this file is
`etc/os-release` but relative to target root. This means that if you are running
updater on root file system that is not current root then values in this table are
for target not for host system.

This is normal table and you can iterate trough it using `pairs` or you can
directly access specific value by indexing it. List of standard options can be
found https://www.freedesktop.org/software/systemd/man/os-release.html[here].

The most interesting value is `os_release.VERSION` as this contains current system
release version.

This table can be empty if there was no `os-release` file.

host_os_release
~~~~~~~~~~~~~~~

This is table with parsed content of os-release file for host system. Source file
for this is always `/etc/os-release`. See variable os_release for example usage
and expected content.

Table can be empty if there was no `/etc/os-release`.

Export variables to Script
--------------------------

For security reasons individual scripts doesn't share variables. But it's
sometimes beneficial to have variable that can be read by sub-script. Such
variable is so called exported.

  Export('variable')
  Unexport('variable')

To export variable you have to call `Export` function with name of variable as
argument. To revert that you have to call `Unexport` function with same argument.

Be aware that changes done in sub-script to exported variables are not propagated
back to original script. But it's propagated to script executed from sub-script.

Hooks
-----

As the hooks are run after all the dependencies have been resolved and
plan has been made, it is no longer possible to call the `Repository`,
`Package`, `Install` and `Uninstall` commands.

The only parameter of the hook is a package object. It is a table that
has all the meaningful options from the `Package` and `Install`
commands and the ones from `installed` variable. However, with options
listing multiple possibilities, only the one chosen is kept. Also,
additional `name` option is included.

Available libraries and standard functions
------------------------------------------

In addition to the functions listed above, following functions and
libraries are made available. They are available in the security level
listed and in all higher levels.

Restricted::
  * `table` library
  * `string` library
  * `math` library
  * `assert`
  * `error`
  * `ipairs`
  * `next`
  * `pairs`
  * `pcall`
  * `select`
  * `tonumber`
  * `tostring`
  * `type`
  * `unpack`
  * `xpcall`
  * `DBG`
  * `INFO`
  * `WARN`
  * `ERROR`
  * `version_cmp`
  * `version_match`
Local::
  * `uci` library
  * `io`
  * `file`
  * `ls`
  * `stat`
  * `lstat`
Full::
  * The whole lua library
