#!/usr/bin/env python3
# Copyright (c) 2016-2018, CZ.NIC, z.s.p.o. (http://www.nic.cz/)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the CZ.NIC nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL CZ.NIC BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import io
import os
from copy import copy
import glob
import argparse
import gzip
import tarfile
import hashlib
import shutil
import fnmatch

# Opkg system path to info files
OPKG_INFO = "/usr/lib/opkg/info"
# Default repository path
REPO_PATH = "/usr/share/updater/localrepo"
# Script description to help text
HELP_DESCRIPTION = """
    Local opkg repository management script.
    """


def gen_updater_config():
    "Generate updater configuration for all repositories"
    with open(os.path.join(REPO_PATH, "localrepo.lua"), "w") as file:
        file.write("-- Auto-generated updater-ng configuration\n")
        for repo in repo_list():
            file.write("Repository('localrepo-" + repo + "', 'file://" +
                       REPO_PATH + "/" + repo + "')\n")


def parse_control(block):
    "Parse opkg control section and return it as a dictionary"
    ctl = dict()
    desc = None
    for line in block:
        i = line.find(':')
        # TODO assert i>0
        if desc is not None:
            desc.append(line)
            continue
        field = line[:i]
        data = line[i+1:]
        if field == "Description":
            desc = [data]
        else:
            ctl[field] = data.strip()
    ctl["Description"] = desc
    return ctl


def split_index(lines):
    """
    Return list of blocks in lines where every block is list of lines in
    given block
    """
    blocks = []
    wblock = []
    toclose = False
    for line in lines:
        if toclose:
            # Line doesn't start with space (in case of description) and there
            # is some potential field divided from data with colon.
            if line[0] != ' ' and line.find(':'):
                del wblock[-1]  # Drop new line that triggered this
                if len(wblock) > 0:
                    blocks.append(wblock)
                wblock = []
            toclose = False
        if line == "\n":
            toclose = True
        wblock.append(line)
    if wblock[-1] != "\n":
        print("Index doesn't end with empty line")
        exit(1)
    del wblock[-1]  # Drop last new line
    if len(wblock) > 0:  # Append last block if there is something in it
        blocks.append(wblock)
    return blocks


def repo_list():
    "Return list of repositories"
    repos = []
    for root, _, files in os.walk(REPO_PATH):
        if 'Packages.gz' in files:
            repos.append(root[len(REPO_PATH)+1:])
    return repos


def repo_index_parse(repo):
    """
    Parse all blocks in repository index.

    Argument repo have to be a name of the repository.

    It returns dictionary where key is name of package and value is dictionary
    of available versions (version string is the key) in repository. Value in
    that dictionary is another dictionary with all fields from control header
    in index.
    """
    packages = os.path.join(REPO_PATH, repo, 'Packages.gz')
    if not os.path.isfile(packages):
        return dict()  # Just a template for new repository
    with gzip.open(packages, 'rt') as file:
        content = file.readlines()
    blocks = split_index(content)
    pkgs = dict()
    for block in blocks:
        ctl = parse_control(block)
        name = ctl['Package']
        if name not in pkgs:
            pkgs[name] = dict()
        pkgs[name][ctl['Version']] = ctl
    return pkgs


def repo_index_write(repo, index):
    """
    Write repository index back to file.

    Argument repo have to be a name of the repository and index is dictionary
    returned from repo_index_parse (can contain changes or can be generated
    grand new).

    You can also create new index just by passing empty dictionary to pkg_add
    function.
    """
    packages = os.path.join(REPO_PATH, repo, 'Packages.gz')
    if not os.path.isfile(packages):
        if len(index) > 0:
            repo_init(repo)
    if len(index) == 0:
        repo_rm(repo)
        return
    ordered = ("Package", "Version", "MD5Sum", "SHA256sum", "Filename")
    with gzip.open(packages, 'wt') as file:
        for _, versions in index.items():
            for version in versions:
                ctl = versions[version]
                for key in ordered:
                    file.write(key + ': ' + ctl[key] + '\n')
                for key, value in ctl.items():
                    if key not in ordered and key != "Description":
                        file.write(key + ': ' + value + '\n')
                if ctl["Description"] is not None:
                    file.write("Description:" + ctl["Description"][0])
                    file.writelines(ctl["Description"][1:])
                file.write('\n')


def repo_init(repo):
    """
    Add repository if it doesn't exists. This low level function handling
    files directly.
    """
    repo_path = os.path.join(REPO_PATH, repo)
    repo_pkgs = os.path.join(repo_path, 'Packages.gz')
    if os.path.isfile(repo_pkgs):
        return  # Repository seems to be already there
    if not os.path.isdir(repo_path):
        os.makedirs(repo_path)
    with gzip.open(repo_pkgs, 'wt') as file:
        file.write('\n')
    gen_updater_config()


def repo_rm(repo):
    """
    Remove repository including all files in it. This is low level function
    handling files directly.
    """
    rpath = os.path.join(REPO_PATH, repo)
    if not os.path.isdir(rpath):
        return  # There is no such repository so ignore it
    for root, dirs, files in os.walk(rpath):
        for file in files:
            os.remove(os.path.join(root, file))
        for directory in dirs:
            os.rmdir(os.path.join(root, directory))
    os.rmdir(rpath)
    gen_updater_config()


def repo_index_list(index, pkg, version):
    """
    Return list of all packages matching pkg and version.
    """
    match = []
    for pkg_name, versions in index.items():
        if not fnmatch.fnmatch(pkg_name, pkg):
            continue
        for vers, ctl in versions.items():
            if not fnmatch.fnmatch(vers, version):
                continue
            match.append(ctl)
    return match


def pkg_ctl(file):
    """
    Get control dictionary from package file.
    """
    if not os.path.isfile(file):
        print("No such file: " + file)
        return
    if not tarfile.is_tarfile(file):
        print("File " + file + " is not valid tar archive.")
        return
    with tarfile.open(file) as tar:
        with tarfile.open(fileobj=tar.extractfile('./control.tar.gz')) as ctar:
            content = io.TextIOWrapper(ctar.extractfile('./control')).readlines()
    # TODO handle missing files in tar and such
    return parse_control(content)


def add_pkg(repo, index, file):
    """
    Add package to repository.

    Argument repo have to be a repository name. Argument index have to be a
    valid repository index or empty dictionary. Argument file have to be a path
    to existing ipkg package.

    This function by its design ovewrites any conflicting version by default.
    """
    ctl = pkg_ctl(file)
    name = ctl['Package']
    version = ctl['Version']
    newf = name + '_' + version + '.ipk'
    ctl['Filename'] = newf
    with open(file, 'rb') as ffile:
        data = ffile.read()
    ctl['MD5Sum'] = hashlib.md5(data).hexdigest()
    ctl['SHA256sum'] = hashlib.sha256(data).hexdigest()
    if name not in index:
        index[name] = dict()
    index[name][version] = ctl
    repo_init(repo)
    shutil.copyfile(file, os.path.join(REPO_PATH, repo, newf))


def rm_pkg(repo, index, ctl):
    """
    Remove package from repository.

    Argument repo have to be a repository name. Argument index have to be a
    valid repository index. Argument ctl have to be a control field existing in
    index.
    """
    name = ctl['Package']
    vers = ctl['Version']
    file = os.path.join(REPO_PATH, repo, ctl['Filename'])
    del index[name][vers]
    if len(index[name]) == 0:
        del index[name]  # Drop package if it has no other version
    if os.path.isfile(file):
        os.remove(file)


def cmd_add(args):
    "add command handler"
    index = repo_index_parse(args.repo)
    for bpkg in args.package:
        fpkgs = glob.glob(bpkg)
        if len(fpkgs) == 0:
            print("No matching file: " + bpkg)
            exit(1)
        for fpkg in fpkgs:
            add_pkg(args.repo, index, fpkg)
    repo_index_write(args.repo, index)


def cmd_rm(args):
    "rm command handler"
    if args.all:
        repo_rm(args.repo)
        return
    index = repo_index_parse(args.repo)
    for pkg in args.package:
        i = pkg.find('_')
        if i < 0:
            pkg_name = pkg
            version = '*'
        else:
            pkg_name = pkg[:i]
            version = pkg[i+1:]
        match = repo_index_list(index, pkg_name, version)
        if len(match) == 0:
            print('"' + pkg + '" matches no package in repository')
        for ctl in match:
            print("Removing package " + pkg_name + '_' + version)
            rm_pkg(args.repo, index, ctl)
    repo_index_write(args.repo, index)


def cmd_get(args):
    "get command handler"

    def getter(ctl):
        "Copy file from repository"
        file = os.path.join(REPO_PATH, args.repo, ctl['Filename'])
        if not os.path.isfile(file):
            print('File ' + file + """ is missing. Repository index is not
                  consistent. Please consider running check command.""")
            exit(1)
        if os.path.exists(ctl['Filename']):
            print('File ' + ctl['Filename'] + " already exists in current" +
                  "directory. Not overwriting it.""")
            return
        print("Getting package: " + ctl['Filename'])
        shutil.copyfile(file, ctl['Filename'])

    index = repo_index_parse(args.repo)
    if args.all:
        for _, versions in index.items():
            for _, ctl in versions.items():
                getter(ctl)
    else:
        for pkg in args.package:
            i = pkg.find('_')
            if i < 0:
                pkg_name = pkg
                version = '*'
            else:
                pkg_name = pkg[:i]
                version = pkg[i+1:]
            match = repo_index_list(index, pkg_name, version)
            if len(match) == 0:
                print('"' + pkg + '" matches no package in repository')
                exit(1)
            for ctl in match:
                getter(ctl)


def cmd_clean(args):
    "clean command handler"
    if not os.path.isdir(OPKG_INFO):
        # Expecting that on normal system there is no opkg info directory
        print("Clean command can be run only on Turris OS system.")
        exit(1)
    index = repo_index_parse(args.repo)
    for pkg_name, versions in copy(index).items():
        # Remove currently installed version from versions
        controlf = os.path.join(OPKG_INFO, pkg_name + '.control')
        if os.path.isfile(controlf):
            versions = copy(versions)
            with open(controlf, 'r') as file:
                content = file.readlines()
            ctl = parse_control(content)
            # TODO check if it is really installed (State installed)
            if ctl['Version'] in versions:
                del versions[ctl['Version']]
        # Now remove any other version
        for version in copy(versions):
            print("Removing package " + pkg_name + '_' + version)
            rm_pkg(args.repo, index, versions[version])
    repo_index_write(args.repo, index)


def cmd_check(args):
    "check command handler"
    repos = args.repository
    if len(repos) == 0:
        repos = repo_list()
    consistent = True
    for repo in repos:
        index = repo_index_parse(repo)
        for pkg_name, versions in copy(index).items():
            for version, ctl in copy(versions).items():
                file = os.path.join(REPO_PATH, repo, ctl['Filename'])
                idstring = "Package " + pkg_name + "_" + version
                # Check file existence
                if not os.path.isfile(file):
                    print(idstring + """ has no file in repository.""")
                    if args.fix:
                        print("-> Removing it from index")
                        rm_pkg(repo, index, ctl)
                    consistent = False
                    continue
                # Check hashes
                with open(file, 'rb') as ffile:
                    data = ffile.read()
                md5sum = hashlib.md5(data).hexdigest()
                sha256sum = hashlib.sha256(data).hexdigest()
                if md5sum != ctl['MD5Sum']:
                    print(idstring + """ mismatch md5sum between index and real
                          file.""")
                    consistent = False
                    if args.fix:
                        print("-> Updating md5sum in index")
                        ctl['MD5Sum'] = md5sum
                if sha256sum != ctl['SHA256sum']:
                    print(idstring + """ mismatch sha256sum between index and
                          real file.""")
                    consistent = False
                    if args.fix:
                        print("-> Updating sha256sum in index")
                        ctl['SHA256sum'] = sha256sum
                # Check package control
                #pkgctl = pkg_ctl(file)
                # TODO compare if we have all fields in ctl same
            # TODO go trough files and add missing packages
        repo_index_write(repo, index)
    if len(repos) != 0 and args.fix:
        gen_updater_config()  # Just to be sure, regenerate
    if consistent:
        print("Local repository seems to be consistent.")
    elif not args.fix:
        print("Problems detected. " +
              "Please review them and for automatic fix append --fix option.")
        exit(1)


def cmd_list(args):
    "list command handler"
    repos = args.repository
    if len(repos) == 0:
        repos = repo_list()
    for repo in repos:
        print(repo + ":")
        for pkg_name, versions in repo_index_parse(repo).items():
            outln = '  ' + pkg_name + ':'
            for version in versions:
                outln += ' ' + version
            print(outln)


def parse_arguments():
    "Parse script arguments"
    parser = argparse.ArgumentParser(description=HELP_DESCRIPTION)
    parser.add_argument('--path', type=str, default=REPO_PATH,
                        help="""Path to repository (usable if we are working
                        out of root). In default path
                        /usr/share/updater/localrepo is used.""")
    subparsers = parser.add_subparsers(title='Operation', dest='op')

    parser_list = subparsers.add_parser('list',
                                        help="List all packages in repository")
    parser_list.add_argument('repository', nargs=argparse.REMAINDER,
                             help="""Repositories to be listed.""")

    repo_arg = {
        'type': str, 'default': 'user',
        'help': """Specify repository we are working with (in default
        'user')."""
        }

    parser_add = subparsers.add_parser('add',
                                       help="Add packages to repository")
    parser_add.add_argument('--init', action='store_true',
                            help="Initialize repository if it doesn't exists.")
    parser_add.add_argument('--repo', **repo_arg)
    parser_add.add_argument('package', nargs=argparse.REMAINDER,
                            help="""Packages to be added to local
                            repository""")

    parser_rm = subparsers.add_parser('rm',
                                      help="Add packages to repository")
    parser_rm.add_argument('--repo', **repo_arg)
    parser_rm.add_argument('--all', '-a', action='store_true',
                           help="""Remove all packages in repository including
                           repository it self.""")
    parser_rm.add_argument('package', nargs=argparse.REMAINDER,
                           help="""Packages to be removed from repository.
                           Package version can be specified appending it after
                           package name and underscore. You can also use
                           shell-like wildcards.""")

    parser_get = subparsers.add_parser('get',
                                       help="""Copy package from repository to
                                       current working directory.
                                       """)
    parser_get.add_argument('--repo', **repo_arg)
    parser_get.add_argument('--all', '-a', action='store_true',
                            help="Get all packages in repository.")
    parser_get.add_argument('package', nargs=argparse.REMAINDER,
                            help="""Packages to be received from repository""")

    parser_clean = subparsers.add_parser('clean',
                                         help="""Clean unused packages (not
                                         installed ones) from repository.""")
    parser_clean.add_argument('--repo', **repo_arg)

    parser_check = subparsers.add_parser('check',
                                         help="""Check repository index and
                                         related files and optionally fix
                                         inconsistencies.""")
    parser_check.add_argument('repository', nargs=argparse.REMAINDER,
                              help="""Repositories to be checked""")
    parser_check.add_argument('--fix', action='store_true',
                              help="Fix any detected inconsistencies.")

    return parser.parse_args()


def main():
    args = parse_arguments()

    global REPO_PATH
    REPO_PATH = os.path.expanduser(args.path)

    if args.op == 'list':
        cmd_list(args)
    elif args.op == 'add':
        cmd_add(args)
    elif args.op == 'rm':
        cmd_rm(args)
    elif args.op == 'get':
        cmd_get(args)
    elif args.op == 'clean':
        cmd_clean(args)
    elif args.op == 'check':
        cmd_check(args)


if __name__ == '__main__':
    main()
