Objects
=======

While Lua has native support for objects (mostly by a syntax sugar, by
placing functions inside the table and taking a table as the first
argument), there are some small pieces missing.

To recognize the type of object an, we place a „tp“ field into each.
It contains a string with the name of the object type.

Errors, exceptions, etc
-----------------------

Lua has the `error`-`pcall` mechanism, that is very similar to
`throw`-`try`-`catch` in many other languages. However, the string
that is used conventionally there is not very machine friendly.
Therefore, we define the object type `"error"` and throw these when
appropriate.

An error object would look something like this:

  {
	  tp = "error",
	  reason = <reason>,
	  msg = <human readable message>
  }

Currently defined reasons are:

 * compile: When parsing of lua chunk fails.
 * runtime: Any generic error from running lua. The msg is the error
   string.
 * bad value: A value has been passed that doesn't fit somewhere.
 * malformed URI: An URI was passed, but it doesn't conform to the
   correct syntax.
 * unreachable: A resource requested can't be reached.
 * access violation: The used command or URI is available only in
   context with higher security level.
 * repo broken: A repository is broken. There are two other fields,
   `repo`, which specifies the name and the URI of the repository and
   `why`, which is either `missing`, `integrity` or `syntax` (see the
   language design document).
 * inconsistent: The user is being inconsistent in the requests and
   specifies things that just can't make sense together.
 * multiple: Container for possibly multiple errors. It contains field
   `errors`, which is an array of other exceptions.
 * corruption: Some kind of integrity check is broken on something
   (an URI validation failed, package hash doesn't match, etc).

Other reasons are going to appear in the future. Also, other fields
may appear, depending on the needs of given reason.

It is recommended to create them with utils.exception, since that one
provides meta table with `tostring` event.

Known object types
------------------

This is just list of the known types with a very brief descriptions
what they do.

error::
  See above.
context::
  These are the sandbox contexts. Each config script gets its own and
  they can be inherited (in a different way than object inheritance ‒
  this is hierarchy of configs that include each other).
level::
  A context's security level. They are objects so they can be easily
  compared, but don't do much by themselves.
package::
  A description of a package.
repository::
  Specification of (yet unparsed) repository.
parsed-repository::
  A repository that is already downloaded and parsed.
pkg-list::
  List of packages produced by a repository. Used mostly as an
  intermediate product during repository processing.
script::
  Return value of the `Script` command. This is mostly a dummy handle,
  since morphers require to have a return value.
dep-and, dep-or, dep-not::
  Dependency composition objects. They contain the field `sub`, which
  is a table of sub-dependencies.
dep-package::
  Package description from dependencies. It must contain field `name`
  containing name of package group and optionally also field
  `version` containing version limitations.
