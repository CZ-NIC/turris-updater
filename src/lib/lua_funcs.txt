Lua injections
==============

We inject several functions into the lua global environment. Since
there's no good place to document them (like .h files for C code),
they are listed here.

Logging
-------

log(level, depth, msg, msg, msg, ...)::
  This is a low-level function used for logging. It should not be used
  directly by lua code. The messages are just strings that are
  concatenated together before outputting. The level is one of:
  - DIE
  - ERROR
  - WARN
  - DBG
  - TRACE
  The depth argument specifies how many functions on the top of the stack
  are to be disregarded when printing the source file, line number and
  function name to the logs. 0 means the function directly calling log,
  1 is its caller, etc.
ERROR(msg, msg, ...)::
WARN(msg, msg, ...)::
DBG(msg, msg, ...)::
TRACE(msg, msg, ...)::
  These output a message to the logs with a given level. The messages
  are concatenated together.
DIE(msg, msg, ...)::
  In addition to outputting the message on the ``DIE`` level, it also
  terminates the application with error exit code.
update_state(state)::
  Dump the message for given state into `/tmp/update-state/state`.
  Allowed states are as follow:
  - `LS_INIT`: Initial state (`initialize`)
  - `LS_CONF`: Running configuration scripts (`configuration`)
  - `LS_PLAN`: Generating plan (`planning`)
  - `LS_DOWN`: Downloading needed packages (`downloading`)
  - `LS_PREUPD`: Running updater's preupdate hooks (`preupdate-hooks`)
  - `LS_UNPACK`: Unpacking downloaded packages (`unpacking`)
  - `LS_CHECK`: Checking for files collisions and more (`checking`)
  - `LS_INST`: Running preinst scripts and merging files to filesystem (`install`)
  - `LS_POST`: Running postinst scripts (`post-install`)
  - `LS_REM`: Removing leftover files (`removals`)
  - `LS_CLEANUP`: Cleaning up control files (`cleanup`)
  - `LS_POSTUPD`: Running updater's postupdate hooks (`postupdate-hooks`)
  - `LS_EXIT`: Updater exit (`exit`)
  - `LS_FAIL`: Detected failure, exiting. (`failure`)

Cleanup
-------

It's common to have code that requires cleanup. But ensuring that cleanup is
really called is tedious task. But thanks to atexit function and common DIE
function we can ensure that cleanup functions will be called. We defined function
to register, unregister and call cleanup function.

cleanup_register(function)::
  This registers given function as to be called when cleanup is requested.

cleanup_unregister(function)::
  This removes previously registered function from list of functions to be called
  for cleanup. This is done without calling given function.

cleanup_run(function)::
  This runs previously registered function and removes it from list of functions
  to be called for cleanup.

Note: This is for simplicity not implemented completely in C but lua functions
handlers is implemented in Lua it self. But we can't have that completely detached
as we have to ensure that order of cleanup holds even if Lua and C calls are mixed
together.

Following functions are defined for internal use of cleanup functionality only.
But they are not documented outside of the code usage so here they are:

cleanup_register_handle(index)::
  This function registers new cleanup for Lua. It expect index identifying this
  cleanup in global table of cleanup functions. It is used to register lua cleanup
  function handle to C cleanups. Exact Lua function is stored in Lua table and
  only index identifying given cleanup is passed to C.

cleanup_unregister_handle(index)::
  This function unregisters existing cleanup for Lua. It expect index identifying
  this cleanup in global table of cleanup functions. It reverse function or
  `cleanup_register_handle`.

Subprocesses
------------

Family of functions `subproc*` defined in `subprocess.h` are exported to lua
in form of functions `subprocess`.

Function `subprocess` is defined as follows:
`subprocess(type, message, timeout, callback, command ...)`

* `type` is identification used to specify what type of subprocess it's. Allowed
  predefined constants are as follows:
  - `LST_PKG_SCRIPT` Any script provided by package (pre/post inst/rm)
  - `LST_HOOK` Hook script executed on some updater state

* `message` is string describing what this subprocess is to user. It's human
  readable description of executed command.

* `timeout` is time in seconds after which subprocess will be automatically
  killed.

* `callback` is optional function that would be called in subprocess just before
  It executes given command. If you don't want to specify it then you can pass nil
  Or you can just drop it out (in that case command is expeted on this argument
  Place). This functions should has no arguments and shouldn't return anything.

* `command` is any arbitrary number of string arguments that are passed as command
  and its additional arguments.

This function returns exit code of executed subprocess as first argument. And
output of this process as second argument. (Output includes both stdout and
stderr).

Note::
  There is some problem with printing from lua to stdout in callback on some
  platforms.

Download manager (download)
---------------------------

Downloader allowing you to download files using libcurl/curl. It supports parallel
downloads, repeats on failure and more. It is implemented in C and is exported to
Lua as an module `download`.

New instance of download object has to be created by calling following function:
`new(parallel)` 

* Parameter `parallel` should be number that specifies number of parallel
  downloads to be run.

Function `new(parallel)` returns object with following methods:

download(url, opts, file)::
  Add new download request. Downloaded data are either stored in buffer in program
  it self or they can be directly written to file. After successful `run()`
  execution (`nil` is returned) you can access data by indexing `downloader`
  object with `url`. Downloaded data is in such case threated as a text and
  everything up to size of received buffer or zero byte is returned.

  * `url` is string URL to data to be downloaded. See curl for supported protocols
    and formats.
  * `opts` is table with connect options. It can be omitted if not required.
	Following fields can be specified:
    - `timeout`: Download timeout in seconds for single retry
    - `connect_timeout`: Download timeout for single connection
    - `retries`: Number of retries
    - `follow_redirect`: Boolean value if redirects should be followed. Otherwise
      such connection is reported as failed.
    - `ssl_verify`: Boolean value if SSL certificate should be verified.
    - `ocsp`: Boolean value if OCSP should be used for certificate validity
      verification. This is used only if `ssl_verify` is set to `True`.
    - `cacert_file`: Path to CA certificate in PEM format. Usable for certification
      pinning.
    - `capath`: Path to directory containing CA certificates in PEM format. You can
      use `/dev/null` if `cacert_file` is used for certification pinning.
    - `crl_file`: Path to CRL file that will be used for certificate validity
      verification. Note that OCSP is preferred way and this is just for backward
      compatibility.
  * `file` is string with path to output file. File can exist (in such case it is
    overwritten) but it's not required. Directory containing given file has to
	exist. This argument is optional and if not defined then downloaded data are
	stored in buffer in memory.

run()::
  Downloads all registered requests. This method returns either when all downloads
  are finished or when error is encountered with one of downloads. In case of
  error return happens as soon as possible and return table describing failed
  download. If program would like to continue with downloads then it should call
  `run()` again as soon as possible. In such case failed instance/request is
  ignored. In case of no error then `run()` return `nil`. Table returned in case
  of error has following fields:

  * `url` string URL passed to one of `download_*` methods
  * `error` string containing error message

Asynchronous events
-------------------

Some of the functions from ``events.h`` are exposed to lua code, with
minor modifications.

Currently, it is possible to run external commands with the
`run_command` function. The code would look like this:

  function terminated(exit_code, killed, stdout, stderr)
    -- The command terminated
  end

  function postfork()
    -- Run after fork in the child â€’ set up the environment
  end

  local id = run_command(terminated, postfork, input, term_timeout, kill_timeout, command, param, param)

  events_wait(id)

The functionality is very similar to the C functions, with these
differences:

* It doesn't take the `events` parameter, one global `events`
  structure per interpreter is used.
* The callbacks don't take the `data` or `wait_id` parameters, since
  lua has closures and passing information into the callbacks is easy.
* Lua naturally supports strings with embedded zero bytes, therefore
  there are no lengths of the inputs or outputs.
* The `exit_code` in the callback is not the raw integer from the
  system call, but decoded to the exit code of the process or signal
  number that terminated it.
* `killed` is a string, one of:
  - `TERMINATED`
  - `TERMED`
  - `KILLED`
  - `SIGNAL_OTHER`
* The events_wait take any number of ip parameters instead of an
  array.

The `postfork` and `input` parameters may be nil. The `term_timeout`
and `kill_timeout` take -1 to mean no timeout.

There may be any number of the `param` parameters, which are passed to
the command.

Currently, there's no way to cancel running command from lua, since
that would make the wrapper code needlessly complex (while there seems
to be no need to cancel them currently).

For calling standard shell utility, or in fact every busybox function,
`run_util` is provided. It is same as `run_command` except it accepts
as `command` parameter one of supported busybox function names. So you
pass for example `rm` instead of `/bin/rm`. This is preferred way of
calling them, because when busybox is embedded then we don't rely on
system utilities and so it should be more reliable.

The other event is `download`:

  function callback(status, content)
    if status == 200 then
      print("Downloaded: " .. content)
    else
      print("Download failed (" .. content .. ")")
    end
  end

  local id = download(callback, "https://example.org/file", "/path/to/cert", "/path/to/crl", true)

  events_wait(id)

The example is mostly self-explanatory and again, this acts very
similar to the C version.

Filesystem manipulation
-----------------------

mkdtemp([directory])::
  It creates a temporary directory. If directory is provided, it is
  created as a subdirectory of the given directory, otherwise it is
  created inside `/tmp`. It returns path to the new directory, or
  `nil` and an error message.

chdir(directory)::
  Change the current working directory to the one provided.

getcwd()::
  Get the current working directory.

mkdir(directory)::
  Create a directory. All the parent directories must already exist.
  The directory itself shall not exist. It throws on error.

move(old, new)::
  Move a file from the old location to the new. It tries to cope with
  paths on different devices.

ls(directory)::
  Return a table with file names under the given directory (acts like
  shell's `ls -a`, omitting the `.` and `..` entries). Value of
  each is the type of the file there, which may be:
  b;; A block device
  c;; A character device
  d;; A directory
  f;; A named pipe
  l;; A symbolic link
  r;; A regular file
  s;; A unix-domain socket
  ?;; Failed to determine the type

stat(path)::
  Statistics about the given file. If the file does not exist, it
  returns nothing. Otherwise, the file type is returned (see the types
  of `ls`). The second result is the permissions of the file, in the
  imitation of shell's `ls -l`, like `rwxr-x---`.

lstat(path)::
  Same as `stat` except the `lstat` behaviour is preferred.
  (eg. provides info about symbolic link if it is a link, instead of
  the target).

sync()::
  Writes everything to a permanent storage (equivalent to the shell's
  `sync` command).

locks.acquire(path)::
  Lock a file with the `lockf` call. Fail if the lock is already held
  by other process. Create the file as needed. Return a lock object as
  a result. It has release() method, to release the lock. The lock is
  also released when the object is garbage collected, but there's no
  guarantee how soon it may be.

Journal manipulation
--------------------

All the journal manipulation is located in the `journal` module. This
is about the lua interface. For the on-disk format, look at the
`journal` document.

The location of the journal can be set by the `path` variable inside
the module (it exists mostly for testing purposes).

There are several constants for the journal record types:

 `START`:: Automatically inserted at the beginning of journal.
 `FINISH`:: Automatically inserted when the journal is closed.
 `UNPACKED`:: Packages are unpacked and ready to be installed.
 `CHECKED`:: Pre-installation checks (like collision checks) are
   successfully performed.
 `MOVED`:: The files are moved into place.
 `SCRIPTS`:: All the post/pre-* scripts were run.
 `CLEANED`:: Cleanup of temporary files is successful.

There are following functions:

  fresh():: Open a new journal. It fails if there's a journal file
    already.
  recover():: Open a previous journal. It returns table with the
    content of the journal. If there is no journal nil is returned.
  finish([keep]):: Close the journal. If the keep is set to true,
    it keeps the journal in place, otherwise it is deleted. The idea
    is that the application would close the journal when it succeeds,
    but would leave it there in case of interrupted operation, so
    usually nothing is set, the flag is for testing purposes.
  write(type, ...):: Write a journal record of the given type (see
    above). Any other parameters are stored as parameters. Data
    structures must not contain meta tables and functions.
  opened():: Returns if the journal is opened. This is for testing
    purposes.

The format of journal returned by recover is a table with records.
Each record contains `type` â€’ one of the types above, and `params` â€’
table with all the parameters stored with the record.

Pisocat
-------

Picosat can be used trough module `picosat`. Here is briefly described
its interface as it can be used from Lua. For more information about
usage see Picosat documentation in its source file.

You can create picosat instance by calling `picosat.new` function.
It returns object with following methods:

  var(count):: Creates given number of new variables and returns them.
    If no argument is given, it returns one new variable.
  clause(var, ...):: Adds clause. Arguments `var` are variables
    previously created with `var` method. Appending minus before variable
    adds boolean negation.
  assume(var):: Adds assumption about value `val` for next satisfiable
    check. Appending minus before `var` assumes false, not appending it
    assumes true.
  satisfiable():: Checks if clauses are satisfiable with given
    assumptions. Returns true or false accordingly.
  max_satisfiable():: Generates maximal satisfiable subset of assumptions.
    Can be called only after `satisfiable`. Returns set of all assumptions
    that can be assumed at the same time. Note that this reassumes previous
    assumptions, so they are again valid for next `satisfiable` call.

After calling `satisfiable` you can access assigned values by indexing
object with variable you are interested in. It returns true or false.
It can also return nil if variable was added after `satisfiable` method
call.

Others
------

There are some other functions.

DataDumper(variable)::
  A function that converts (almost any) variable to a string
  containing a lua chunk. The chunk, when run, returns equivalent
  value as passed. Simply stated, this serializes data into lua code.
  It is a third-party code from
  `http://lua-users.org/wiki/DataDumper`. Note that some data
  (userdata, for example) can't be represented this way.

setenv(name, value)::
  Set the environment variable with the given name to the given value.
  Errors in case of failure, otherwise returns nothing.

reexec(args,...)::
  Try to run the program from the beginning, preserving the command
  line arguments and working directory. It depends on being set up
  properly at the start of the program.
  As arguments you can specify additional arguments that will be appended
  at the end of original ones.

uri_internal_get(name)::
  Function to access embedded files using `internal:` uri. Argument `name`
  is name of requested embedded file. Returns file content. If there is
  no file under given name, error is raised.

system_reboot(stick)::
  Reboots system. Argument `stick` if set to true results in that this
  newer returns.

get_updater_version()::
  Returns string containing updater's version.
